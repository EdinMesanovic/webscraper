name: Release KorpaScraper

on:
  push:
    tags: ['v*']      # npr. v0.1.0
  workflow_dispatch:   # ručno pokretanje (opcionalno)

permissions:
  contents: write

env:
  APP_NAME: KorpaScraper

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-14
            target: macos-arm64
            py: '3.10'
          - os: macos-13
            target: macos-x64
            py: '3.10'
          - os: windows-latest
            target: windows-x64
            py: '3.10'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build binary
        run: |
          pyinstaller --onefile --name "${{ env.APP_NAME }}" scraper.py

      # macOS pakovanje (zip + checksums, verzionisano i "latest")
      - name: Package (macOS)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          set -e
          cd dist
          VER="${GITHUB_REF_NAME:-dev}"
          OUT_VER="${{ env.APP_NAME }}_${{ matrix.target }}_${VER}.zip"
          OUT_LATEST="${{ env.APP_NAME }}_${{ matrix.target }}.zip"

          # zip same binarke (npr. dist/KorpaScraper) u oba naziva
          zip -r "$OUT_VER" "${{ env.APP_NAME }}"
          cp "$OUT_VER" "$OUT_LATEST"

          # checksums
          shasum -a 256 "$OUT_VER" > "$OUT_VER".sha256
          shasum -a 256 "$OUT_LATEST" > "$OUT_LATEST".sha256

      # Windows pakovanje (zip + checksums, verzionisano i "latest")
      - name: Package (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: pwsh
        run: |
          Set-Location dist
          $VER = if ($env:GITHUB_REF_NAME) { $env:GITHUB_REF_NAME } else { "dev" }
          $outVer    = "${env:APP_NAME}_windows-x64_$VER.zip"
          $outLatest = "${env:APP_NAME}_windows-x64.zip"

          Compress-Archive -Path "${env:APP_NAME}.exe" -DestinationPath $outVer
          Copy-Item $outVer $outLatest

          # checksums
          (Get-FileHash $outVer -Algorithm SHA256).Hash | Out-File "$outVer.sha256" -Encoding ascii
          (Get-FileHash $outLatest -Algorithm SHA256).Hash | Out-File "$outLatest.sha256" -Encoding ascii

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            dist/${{ env.APP_NAME }}_*.zip
            dist/${{ env.APP_NAME }}_*.zip.sha256

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/${{ env.APP_NAME }}_*.zip
            dist/**/${{ env.APP_NAME }}_*.zip.sha256
          generate_release_notes: true
          draft: false
          prerelease: false
